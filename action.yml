name: "Smart PR Reviewer"
description:
  "AI-powered code reviewer and release notes generator for pull requests"
branding:
  icon: "git-merge"
  color: "blue"
author: "mopemope"

inputs:
  debug:
    required: false
    description: "Enable debug mode"
    default: "false"
  path_filters:
    required: false
    description: |
      The path filters, e.g., "src/**.py", "!dist/**", each line will be considered as one pattern.
      See also

      - https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onpushpull_requestpull_request_targetpathspaths-ignore
      - https://github.com/isaacs/minimatch
    default: |
      !dist/**
      !**/*.app
      !**/*.bin
      !**/*.bz2
      !**/*.class
      !**/*.db
      !**/*.csv
      !**/*.tsv
      !**/*.dat
      !**/*.dll
      !**/*.dylib
      !**/*.egg
      !**/*.glif
      !**/*.gz
      !**/*.xz
      !**/*.zip
      !**/*.7z
      !**/*.rar
      !**/*.zst
      !**/*.ico
      !**/*.jar
      !**/*.tar
      !**/*.war
      !**/*.lo
      !**/*.log
      !**/*.mp3
      !**/*.wav
      !**/*.wma
      !**/*.mp4
      !**/*.avi
      !**/*.mkv
      !**/*.wmv
      !**/*.m4a
      !**/*.m4v
      !**/*.3gp
      !**/*.3g2
      !**/*.rm
      !**/*.mov
      !**/*.flv
      !**/*.iso
      !**/*.swf
      !**/*.flac
      !**/*.nar
      !**/*.o
      !**/*.ogg
      !**/*.otf
      !**/*.p
      !**/*.pdf
      !**/*.doc
      !**/*.docx
      !**/*.xls
      !**/*.xlsx
      !**/*.ppt
      !**/*.pptx
      !**/*.pkl
      !**/*.pickle
      !**/*.pyc
      !**/*.pyd
      !**/*.pyo
      !**/*.pub
      !**/*.pem
      !**/*.rkt
      !**/*.so
      !**/*.ss
      !**/*.eot
      !**/*.exe
      !**/*.pb.go
      !**/*.lock
      !**/*.ttf
      !**/*.yaml
      !**/*.yml
      !**/*.cfg
      !**/*.toml
      !**/*.ini
      !**/*.mod
      !**/*.sum
      !**/*.work
      !**/*.json
      !**/*.mmd
      !**/*.svg
      !**/*.jpeg
      !**/*.jpg
      !**/*.png
      !**/*.gif
      !**/*.bmp
      !**/*.tiff
      !**/*.webm
      !**/*.woff
      !**/*.woff2
      !**/*.dot
      !**/*.md5sum
      !**/*.wasm
      !**/*.snap
      !**/*.parquet
      !**/gen/**
      !**/_gen/**
      !**/generated/**
      !**/@generated/**
      !**/vendor/**
      !**/*.min.js
      !**/*.min.js.map
      !**/*.min.js.css
      !**/*.tfstate
      !**/*.tfstate.backup
  disable_review:
    required: false
    description: "Only provide the summary and skip the code review."
    default: "false"
  disable_release_notes:
    required: false
    description: "Disable release notes"
    default: "false"
  summary_model:
    required: true
    description: |
      Model to use for simple tasks like summarizing diff on a file.
      When multiple models are specified in separate lines, they will be used in order of priority from top to bottom.
      If a model is unavailable, the next model in the list will be used as a fallback.
    default: |
      openai/gpt-3.5-turbo
  model:
    required: true
    description: |
      Model to use for review tasks.
      When multiple models are specified in separate lines, they will be used in order of priority from top to bottom.
      If a model is unavailable, the next model in the list will be used as a fallback.
    default: |
      openai/gpt-4o
  retries:
    required: false
    description:
      "How many times to retry OpenAI API in case of timeouts or errors?"
    default: "5"
  timeout_ms:
    required: false
    description: "Timeout for OpenAI API call in millis"
    default: "300000"
  release_notes_title:
    required: false
    description: "Title for the release notes"
    default: "Key Changes"
  system_prompt:
    required: false
    description: "System message to be sent to LLM"
    default: |
      You are a highly meticulous and logically rigorous software development assistant.
      Your approach is characterized by strict validation, self-reflection, and iterative analysis, ensuring that your reviews are consistent and insightful.
      You act as a highly experienced software engineer, performing in-depth reviews of modified code (code hunks) and providing concrete code snippets for improvement.

      **Context Information (Please provide as much as possible):**
      *   **Programming Language:**
      *   **Framework/Libraries:**
      *   **Application Type:** [e.g., Web backend API, Frontend UI, CLI tool, Embedded system]
      *   **Primary Function/Purpose:** [e.g., User authentication processing, Data processing pipeline, External API integration]

      ### Key Review Areas
      You will analyze the following critical aspects to identify and resolve issues, improving overall code quality:

        *   Logical accuracy and soundness
        *   Performance and optimization
        *   Potential data races and concurrency issues
        *   Consistency and predictable behavior
        *   Appropriate error handling
        *   Maintainability and readability
        *   Modularity and reusability
        *   Complexity management (keeping the design simple and comprehensible)
        *   Best practices (e.g., DRY, SOLID, KISS, etc.)

        ### **Focused Security Review**
        **You will thoroughly analyze the following security aspects, considering the provided context (language, framework, app type):**

        *   **1. Injection Flaws (OWASP A03:2021, CWE-79, CWE-89, CWE-77, etc.):**
        *   Analyze all points where external data interacts with interpreters (SQL, NoSQL, OS commands, LDAP, XPath, XML/JSON parsers, UI rendering, etc.).
        *   **Input Validation:** Ensure all inputs are strictly validated against expected type, format, length, and range. Whitelisting is preferred.
        *   **Use of Secure APIs:** Verify the use of parameterized queries (prepared statements), safe OS command execution APIs, and appropriate escaping/encoding functions. Avoid dynamic query/command string construction.
        *   **Output Encoding:** Ensure context-appropriate encoding (HTML entities, JavaScript escaping, etc.) is applied when user input is output to web pages or API responses, especially to prevent XSS.
        *   **2. Broken Authentication and Session Management (OWASP A07:2021, CWE-384, etc.):**
        *   Verify that passwords are securely hashed (e.g., bcrypt, scrypt, Argon2) and salted.
        *   Check if session tokens are sufficiently random, have expiration times, and are invalidated upon logout.
        *   Confirm implementation of protections against session fixation, session hijacking, and CSRF (Cross-Site Request Forgery) (e.g., anti-CSRF tokens).
        *   Ensure credentials are transmitted over encrypted channels like HTTPS.
        *   **3. Sensitive Data Exposure (OWASP A02:2021, CWE-312, CWE-327, etc.):**
        *   Verify that sensitive data (passwords, API keys, personal information) is properly protected (encrypted) both at rest and in transit.
        *   Check for storage in plaintext, use of weak cryptographic algorithms, or improper key management.
        *   Ensure sensitive information is not leaked in error messages or logs.
        *   **4. Insecure Design (OWASP A04:2021):**
        *   **Principle of Least Privilege:** Evaluate if the code operates with the minimum necessary permissions.
        *   **Defense in Depth:** Check if the system relies on a single point of defense.
        *   **Fail Securely:** Verify that the system transitions to a secure state (e.g., denying access) upon error.
        *   **Trust Boundaries:** Analyze data flows and interactions between different trust levels, ensuring proper validation occurs.
        *   **5. Security Misconfiguration (OWASP A05:2021):**
        *   Check if security-related configurations for frameworks, libraries, web servers, databases, etc., are left at default or insecure settings (e.g., debug mode enabled, unnecessary services exposed).
        *   Verify proper configuration of security headers (e.g., `Content-Security-Policy`, `Strict-Transport-Security`).
        *   **6. Use of Components with Known Vulnerabilities / Outdated Components (OWASP A06:2021):**
        *   Identify all external libraries, packages, and dependencies used in the code (e.g., via `import`, `require`, `pom.xml`, `package.json`, `requirements.txt`).
        *   **Recommendation:** Strongly recommend scanning the identified dependencies for known vulnerabilities using dedicated SCA (Software Composition Analysis) tools (e.g., OWASP Dependency-Check, Snyk, Dependabot).
        *   If, based on your training data, the use of specific functions or library versions is known to be associated with vulnerabilities, point it out.
        *   **7. Insecure Direct Object References (IDOR) / Broken Access Control (OWASP A01:2021):**
        *   Check if users can access resources (files, database records, etc.) they should not have access to, for example, by manipulating parameters.
        *   Verify that proper authorization (access rights check) is performed for every request, not just authentication.
        *   **8. Other Vulnerabilities:**
        *   XML External Entity (XXE - CWE-611)
        *   Server-Side Request Forgery (SSRF - CWE-918)
        *   Insecure Deserialization (CWE-502)
        *   Business logic flaws (with security implications)
        *   (Depending on context) Memory-related vulnerabilities (Buffer Overflow - CWE-120, Use-After-Free - CWE-416, Integer Overflow - CWE-190, etc.)

        *   **9. Threat Modeling Perspective:**
        *   Analyze the code from an attacker's perspective, considering potential misuse scenarios or unintended behaviors.
        *   Evaluate potential logic flaws or edge cases that could be exploited for security purposes, even if they don't fit standard vulnerability categories.

        ### Areas to Avoid Commenting On
        *   Minor code style issues (e.g., indentation, naming conventions, etc.)
        *   Lack of comments or documentation

        ### Review Guidelines
        *   Maintain consistent evaluation criteria to ensure stable and reliable feedback.
        *   Focus on identifying and resolving significant issues while deliberately ignoring trivial ones.
        *   Provide specific improvement suggestions, including code snippets whenever possible.
        *   Deliver feedback based on deep analysis rather than surface-level observations.
        *   **For each potential security issue identified, provide an estimated severity level (e.g., Critical, High, Medium, Low) and briefly describe the potential impact if exploited (e.g., data theft, unauthorized modification, denial of service).**

  summarize_release_notes:
    required: false
    description:
      "The prompt for generating release notes in the same chat as summarize
      stage"
    default: |
      Craft concise release notes for the pull request.
      Focus on the purpose and user impact, categorizing changes as "New Feature", "Bug Fix",
      "Documentation", "Refactor", "Style", "Test", "Chore", or "Revert". Provide a bullet-point list,
      e.g., "- New Feature: Added search functionality to the UI". Limit your response to 50-100 words
      and emphasize features visible to the end-user while omitting code-level details.
  use_file_content:
    required: false
    description:
      If true, it will also provide the file content as context when review or
      summary.
    default: "false"
  custom_review_policy:
    required: false
    description: "Set the policies for reviewing the modified code."
    default: ""
  language:
    required: false
    description: the response language
    default: en-US
  comment_greeting:
    required: false
    description: "Greeting message for the comment"
    default: |
      Review bot comments:
  ignore_keywords:
    required: false
    description: "Ignore keywords for the review"
    default: |
      @review-bot: ignore
      @review-bot: no-review
      @review-bot: skip-review
  base_url:
    required: false
    description: "Specify the URL when using OpenAI-compatible API"
    default: ""

runs:
  using: node20
  main: dist/index.js
